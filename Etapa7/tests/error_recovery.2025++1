// Complete syntactic error recovery test - Stage 7
// This file tests ALL types of syntactic errors that can be recovered by the parser.
// Made by Nathan Guimaraes (334437)

// 1. Global Declarations - invalid global declaration error
bad_global_declaration;     // Error: invalid global declaration
int a = 5;                 // OK: valid declaration after error

// 2. Variable Declaration - invalid initialization
int x = ;                  // Error: invalid initialization (no literal)
int y = 42;                // OK: valid declaration after error

// 3. Array Declaration
int arr1[xyz];             // Error: invalid array size (not an integer literal)
int arr2[5];               // OK: valid declaration after error
int arr3[3] = bad_init;    // Error: invalid array initialization
int arr4[2] = 1, 2;        // OK: valid declaration after error

// 4. Function Declaration
int func1(bad params) {    // Error: invalid parameter list
    return 1;
}
int func2(int a, int b) bad_body;  // Error: invalid function body
int func3(int x) {         // OK: valid function after error
    return x;
}

int w = 5;

// 5. Main function with various command errors
int main() {
    
    // 6. Command Blocks - invalid block content
    {
        bad statement syntax;   // Error: invalid block content
        w = 10;                // OK: valid statement after error
    }
    
    // 7. Commands and Instructions - invalid syntax in command list
    bad command syntax;        // Error: invalid command syntax
    w = 20;                   // OK: valid command after error
    
    // 8. Commands without semicolon (testing semicolon recovery)
    w = 5                     // Error: missing semicolon after assignment
    print "Hello"             // Error: missing semicolon after print
    read w                    // Error: missing semicolon after read
    return 0                  // Error: missing semicolon after return
    
    // 9. Assignments with invalid expressions
    w = ;                     // Error: invalid assignment expression
    arr2[bad_index] = 5;      // Error: invalid array index
    arr2[1] = ;               // Error: invalid array assignment
    w = 100;                  // OK: valid assignment after error
    
    // 10. Input and Output Commands
    print ;                   // Error: invalid print command
    print "Valid message";    // OK: valid print after error
    
    // 11. Return Command
    return ;                  // Error: invalid return expression
    
    // 12. Malformed Expressions
    w = ( );                  // Error: invalid expression in parentheses
    w = arr2[ ];              // Error: invalid array access
    w = 5 + 3;               // OK: valid expression after error
    
    // 13. Function Calls
    func3( );                 // Error: invalid function arguments
    func3(42);               // OK: valid call after error
    
    // 14. Control Flow
    if ( ) {                  // Error: invalid if condition
        w = 1;
    }
    
    if ( ) {                  // Error: invalid if-else condition  
        w = 2;
    } else {
        w = 3;
    }
    
    while do {               // Error: invalid while condition
        w = w + 1;
    }
    
    do {
        w = w - 1;
    } while ;                // Error: invalid do-while condition
    
    // Valid structures after errors to show recovery
    if (w > 0) {
        w = w * 2;
    }
    
    while w < 100 do {
        w = w + 1;
    }
    
    return 0;
}