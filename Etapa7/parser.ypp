%{
    // Federal University of Rio Grande do Sul - Institute of Informatics - Compilers 2025/1
    // Syntax parser made by Nathan Guimaraes (334437)

    #include <stdio.h>
    #include <string>
    #include "ast.hpp"
    #include "symbol.hpp"

    using namespace std;
    
    int yylex(void);
    void yyerror(string s);

    int getLineNumber();

    int syntaxErrors = 0;

    int getSyntaxErrors();

    ASTNode* root;
%}

%code requires {
    #include "ast.hpp"
}

%union {
    Symbol* symbol;
    ASTNode* ast;
}

%expect 1

%token KW_BYTE           
%token KW_INT            
%token KW_REAL           
 
%token KW_IF             
%token KW_ELSE           
%token KW_DO             
%token KW_WHILE          
%token KW_READ           
%token KW_PRINT          
%token KW_RETURN         
 
%token OPERATOR_LE       
%token OPERATOR_GE       
%token OPERATOR_EQ       
%token OPERATOR_DIF      
 
%token<symbol> TK_IDENTIFIER     
 
%token<symbol> LIT_INT           
%token<symbol> LIT_CHAR          
%token<symbol> LIT_REAL          
%token<symbol> LIT_STRING

%token INTERNAL

%type<ast> program
%type<ast> global_declaration_list
%type<ast> declaration_list
%type<ast> variable_declaration
%type<ast> vector_declaration
%type<ast> function_declaration
%type<ast> kw_type
%type<ast> literal
%type<ast> vector_initialization
%type<ast> formal_parameters
%type<ast> parameter_list
%type<ast> commannd_block
%type<ast> command_list
%type<ast> command
%type<ast> assignment
%type<ast> read
%type<ast> print
%type<ast> print_list
%type<ast> return
%type<ast> expression
%type<ast> function_call
%type<ast> factor
%type<ast> arguments_list
%type<ast> expression_list
%type<ast> flux_control

%left '~'
%left '&' '|'
%left '+' '-'
%left '*' '/' '%'
%left '<' '>' OPERATOR_LE OPERATOR_GE
%left OPERATOR_EQ OPERATOR_DIF

%precedence IFX
%precedence KW_ELSE

%%

program
    : global_declaration_list                                                { root = new ASTNode(ASTNodeType::PROGRAM, nullptr, {}, getLineNumber()); root->addChild($1); }
    ;

global_declaration_list
    : declaration_list global_declaration_list                               { $$ = new ASTNode(ASTNodeType::DECLARATION_LIST); $$->addChild($1); if ($2 != nullptr) $$->addChild($2); }
    | declaration_list                                                       { $$ = new ASTNode(ASTNodeType::DECLARATION_LIST); $$->addChild($1); }
    | error global_declaration_list                                          { fprintf(stderr, "Syntax error at line %d: Invalid global declaration - expected variable, vector, or function declaration.\n", getLineNumber()); $$ = $2; }
    | error                                                                  { fprintf(stderr, "Syntax error at line %d: Invalid global declaration - expected variable, vector, or function declaration.\n", getLineNumber()); $$ = nullptr; }
    ;

declaration_list
    : variable_declaration                                                   { $$ = $1; }
    | vector_declaration                                                     { $$ = $1; }
    | function_declaration                                                   { $$ = $1; }
    ;

kw_type
    : KW_BYTE                                                                { $$ = new ASTNode(ASTNodeType::BYTE); }
    | KW_INT                                                                 { $$ = new ASTNode(ASTNodeType::INT); }
    | KW_REAL                                                                { $$ = new ASTNode(ASTNodeType::REAL); }
    ;

literal
    : LIT_INT                                                                { $$ = new ASTNode(ASTNodeType::LITERAL, $1); }
    | LIT_CHAR                                                               { $$ = new ASTNode(ASTNodeType::LITERAL, $1); }
    | LIT_REAL                                                               { $$ = new ASTNode(ASTNodeType::LITERAL, $1); }
    ;

variable_declaration
    : kw_type TK_IDENTIFIER '=' literal ';'                                  { $$ = new ASTNode(ASTNodeType::VARIABLE_DECLARATION); $$->addChild($1); $$->addChild(new ASTNode(ASTNodeType::SYMBOL, $2)); $$->addChild($4); }
    | kw_type TK_IDENTIFIER '=' error ';'                                    { fprintf(stderr, "Syntax error at line %d: Invalid variable initialization - expected literal value (integer, character, or real).\n", getLineNumber()); $$ = nullptr; }
    ;

vector_declaration
    : kw_type TK_IDENTIFIER '[' LIT_INT ']' ';'                              { $$ = new ASTNode(ASTNodeType::VECTOR_DECLARATION); $$->addChild($1); $$->addChild(new ASTNode(ASTNodeType::SYMBOL, $2)); $$->addChild(new ASTNode(ASTNodeType::LITERAL, $4)); }
    | kw_type TK_IDENTIFIER '[' LIT_INT ']' '=' vector_initialization        { $$ = new ASTNode(ASTNodeType::VECTOR_DECLARATION); $$->addChild($1); $$->addChild(new ASTNode(ASTNodeType::SYMBOL, $2)); $$->addChild(new ASTNode(ASTNodeType::LITERAL, $4)); ASTNode* initNode = new ASTNode(ASTNodeType::VECTOR_INITIALIZATION); initNode->addChild($7); $$->addChild(initNode); }
    | kw_type TK_IDENTIFIER '[' error ']' ';'                                { fprintf(stderr, "Syntax error at line %d: Invalid vector size specification - expected integer literal for array size.\n", getLineNumber()); $$ = nullptr; }
    | kw_type TK_IDENTIFIER '[' LIT_INT ']' '=' error                        { fprintf(stderr, "Syntax error at line %d: Invalid vector initialization - expected comma-separated list of literal values.\n", getLineNumber()); $$ = nullptr; }
    ;

vector_initialization
    : literal ',' vector_initialization                                      { $$ = new ASTNode(ASTNodeType::VECTOR_INITIALIZATION); $$->addChild($1); if ($3 != nullptr) $$->addChild($3); }
    | literal ';'                                                            { $$ = new ASTNode(ASTNodeType::VECTOR_INITIALIZATION); $$->addChild($1); }
    ;

function_declaration
    : kw_type TK_IDENTIFIER '(' formal_parameters ')' commannd_block         { $$ = new ASTNode(ASTNodeType::FUNCTION_DECLARATION); $$->addChild($1); $$->addChild(new ASTNode(ASTNodeType::SYMBOL, $2)); if ($4 != nullptr) $$->addChild($4); if ($6 != nullptr) $$->addChild($6); }
    | kw_type TK_IDENTIFIER '(' error ')' commannd_block                     { fprintf(stderr, "Syntax error at line %d: Invalid function parameter list - expected type-identifier pairs separated by commas.\n", getLineNumber()); $$ = nullptr; }
    | kw_type TK_IDENTIFIER '(' formal_parameters ')' error                  { fprintf(stderr, "Syntax error at line %d: Invalid function body - expected command block enclosed in braces '{}'.\n", getLineNumber()); $$ = nullptr; }
    ;

formal_parameters
    : parameter_list                                                         { $$ = new ASTNode(ASTNodeType::FORMAL_PARAMETERS); $$->addChild($1); }
    | %empty                                                                 { $$ = new ASTNode(ASTNodeType::FORMAL_PARAMETERS); }
    ;

parameter_list
    : kw_type TK_IDENTIFIER ',' parameter_list                               { $$ = new ASTNode(ASTNodeType::PARAMETERS_LIST); $$->addChild($1); $$->addChild(new ASTNode(ASTNodeType::SYMBOL, $2)); if ($4 != nullptr) $$->addChild($4); }
    | kw_type TK_IDENTIFIER                                                  { $$ = new ASTNode(ASTNodeType::PARAMETERS_LIST); $$->addChild($1); $$->addChild(new ASTNode(ASTNodeType::SYMBOL, $2)); }
    ;

commannd_block
    : '{' command_list '}'                                                   { $$ = new ASTNode(ASTNodeType::COMMAND); if ($2 != nullptr) $$->addChild($2); }
    | '{' error '}'                                                          { fprintf(stderr, "Syntax error at line %d: Invalid command block content - expected valid statements (assignments, control flow, etc.).\n", getLineNumber()); $$ = nullptr; }
    ;

command_list
    : command command_list                                                   { $$ = new ASTNode(ASTNodeType::COMMAND_LIST); $$->addChild($1); if ($2 != nullptr) $$->addChild($2); }
    | %empty                                                                 { $$ = nullptr; }
    | error ';' command_list                                                 { fprintf(stderr, "Syntax error at line %d: Invalid statement syntax - check for missing operators, identifiers, or semicolons.\n", getLineNumber()); $$ = $3; }
    ;

command
    : commannd_block                                                         { $$ = $1; }
    | assignment ';'                                                         { $$ = $1; }
    | read ';'                                                               { $$ = $1; }
    | print ';'                                                              { $$ = $1; }
    | return ';'                                                             { $$ = $1; }
    | flux_control                                                           { $$ = $1; }
    | ';'                                                                    { $$ = nullptr; }
    | assignment error                                                       { fprintf(stderr, "Syntax error at line %d: Missing semicolon ';' after assignment statement.\n", getLineNumber() - 1); $$ = $1; }
    | read error                                                             { fprintf(stderr, "Syntax error at line %d: Missing semicolon ';' after read statement.\n", getLineNumber() - 1); $$ = $1; }
    | print error                                                            { fprintf(stderr, "Syntax error at line %d: Missing semicolon ';' after print statement.\n", getLineNumber() - 1); $$ = $1; }
    | return error                                                           { fprintf(stderr, "Syntax error at line %d: Missing semicolon ';' after return statement.\n", getLineNumber() - 1); $$ = $1; }
    ;


assignment
    : TK_IDENTIFIER '=' expression                                           { $$ = new ASTNode(ASTNodeType::ASSIGNMENT, nullptr, {}, getLineNumber()); $$->addChild(new ASTNode(ASTNodeType::SYMBOL, $1)); if ($3 != nullptr) $$->addChild($3); }
    | TK_IDENTIFIER '[' expression ']' '=' expression                        { $$ = new ASTNode(ASTNodeType::ASSIGNMENT, nullptr, {}, getLineNumber()); ASTNode* vecAccess = new ASTNode(ASTNodeType::VECTOR_ACCESS, nullptr, {}, getLineNumber()); vecAccess->addChild(new ASTNode(ASTNodeType::SYMBOL, $1)); vecAccess->addChild($3); $$->addChild(vecAccess); if ($6 != nullptr) $$->addChild($6); }
    | TK_IDENTIFIER '=' error                                                { fprintf(stderr, "Syntax error at line %d: Invalid assignment expression - expected valid expression on right side of '='.\n", getLineNumber()); $$ = nullptr; }
    | TK_IDENTIFIER '[' error ']' '=' expression                             { fprintf(stderr, "Syntax error at line %d: Invalid array index expression - expected valid expression inside square brackets.\n", getLineNumber()); $$ = nullptr; }
    | TK_IDENTIFIER '[' expression ']' '=' error                             { fprintf(stderr, "Syntax error at line %d: Invalid array assignment expression - expected valid expression on right side of '='.\n", getLineNumber()); $$ = nullptr; }
    ;

read
    : KW_READ TK_IDENTIFIER                                                  { $$ = new ASTNode(ASTNodeType::READ, nullptr, {}, getLineNumber()); $$->addChild(new ASTNode(ASTNodeType::SYMBOL, $2)); }
    ;

print
    : KW_PRINT print_list                                                    { $$ = new ASTNode(ASTNodeType::PRINT, nullptr, {}, getLineNumber()); $$->addChild($2); }
    | KW_PRINT error                                                         { fprintf(stderr, "Syntax error at line %d: Invalid print statement - expected string literals or expressions to print.\n", getLineNumber()); $$ = nullptr; }
    ;

print_list
    : LIT_STRING print_list                                                  { $$ = new ASTNode(ASTNodeType::LITERAL, $1); if ($2 != nullptr) $$->addChild($2); }
    | expression print_list                                                  { $$ = $1; if ($2 != nullptr) $$->addChild($2); }
    | LIT_STRING                                                             { $$ = new ASTNode(ASTNodeType::LITERAL, $1); }
    | expression                                                             { $$ = $1; }
    ;

return
    : KW_RETURN expression                                                   { $$ = new ASTNode(ASTNodeType::RETURN, nullptr, {}, getLineNumber()); if ($2 != nullptr) $$->addChild($2); }
    | KW_RETURN error                                                        { fprintf(stderr, "Syntax error at line %d: Invalid return statement - expected valid expression after 'return' keyword.\n", getLineNumber()); $$ = nullptr; }
    ;

expression
    : expression '+' expression                                              { $$ = new ASTNode(ASTNodeType::ADD, nullptr, {}, getLineNumber()); $$->addChild($1); $$->addChild($3); }
    | expression '-' expression                                              { $$ = new ASTNode(ASTNodeType::SUBTRACT, nullptr, {}, getLineNumber()); $$->addChild($1); $$->addChild($3); }
    | expression '*' expression                                              { $$ = new ASTNode(ASTNodeType::MULTIPLY, nullptr, {}, getLineNumber()); $$->addChild($1); $$->addChild($3); }
    | expression '/' expression                                              { $$ = new ASTNode(ASTNodeType::DIVIDE, nullptr, {}, getLineNumber()); $$->addChild($1); $$->addChild($3); }
    | expression '%' expression                                              { $$ = new ASTNode(ASTNodeType::MODULO, nullptr, {}, getLineNumber()); $$->addChild($1); $$->addChild($3); }
    | expression '<' expression                                              { $$ = new ASTNode(ASTNodeType::LESS_THAN, nullptr, {}, getLineNumber()); $$->addChild($1); $$->addChild($3); }
    | expression '>' expression                                              { $$ = new ASTNode(ASTNodeType::GREATER_THAN, nullptr, {}, getLineNumber()); $$->addChild($1); $$->addChild($3); }
    | expression '&' expression                                              { $$ = new ASTNode(ASTNodeType::AND, nullptr, {}, getLineNumber()); $$->addChild($1); $$->addChild($3); }
    | expression '|' expression                                              { $$ = new ASTNode(ASTNodeType::OR, nullptr, {}, getLineNumber()); $$->addChild($1); $$->addChild($3); }
    | expression OPERATOR_DIF expression                                     { $$ = new ASTNode(ASTNodeType::DIFFERENT, nullptr, {}, getLineNumber()); $$->addChild($1); $$->addChild($3); }
    | expression OPERATOR_LE expression                                      { $$ = new ASTNode(ASTNodeType::LESS_EQUAL, nullptr, {}, getLineNumber()); $$->addChild($1); $$->addChild($3); }
    | expression OPERATOR_GE expression                                      { $$ = new ASTNode(ASTNodeType::GREATER_EQUAL, nullptr, {}, getLineNumber()); $$->addChild($1); $$->addChild($3); }
    | expression OPERATOR_EQ expression                                      { $$ = new ASTNode(ASTNodeType::EQUAL, nullptr, {}, getLineNumber()); $$->addChild($1); $$->addChild($3); }
    | '~' expression                                                         { $$ = new ASTNode(ASTNodeType::NOT, nullptr, {}, getLineNumber()); $$->addChild($2); }
    | '(' expression ')'                                                     { $$ = $2; }
    | TK_IDENTIFIER '[' expression ']'                                       { $$ = new ASTNode(ASTNodeType::VECTOR_ACCESS, nullptr, {}, getLineNumber()); $$->addChild(new ASTNode(ASTNodeType::SYMBOL, $1)); $$->addChild($3); }
    | function_call                                                          { $$ = $1; }
    | factor                                                                 { $$ = $1; }
    | '(' error ')'                                                          { fprintf(stderr, "Syntax error at line %d: Invalid parenthesized expression - expected valid expression inside parentheses.\n", getLineNumber()); $$ = nullptr; }
    | TK_IDENTIFIER '[' error ']'                                            { fprintf(stderr, "Syntax error at line %d: Invalid array access - expected valid index expression inside square brackets.\n", getLineNumber()); $$ = nullptr; }
    ;

function_call
    : TK_IDENTIFIER '(' arguments_list ')'                                   { $$ = new ASTNode(ASTNodeType::FUNCTION_CALL, nullptr, {}, getLineNumber()); $$->addChild(new ASTNode(ASTNodeType::SYMBOL, $1)); if ($3 != nullptr) $$->addChild($3); }
    | TK_IDENTIFIER '(' error ')'                                            { fprintf(stderr, "Syntax error at line %d: Invalid function call arguments - expected comma-separated list of expressions.\n", getLineNumber()); $$ = nullptr; }
    ;

factor
    : TK_IDENTIFIER                                                          { $$ = new ASTNode(ASTNodeType::SYMBOL, $1); }
    | LIT_INT                                                                { $$ = new ASTNode(ASTNodeType::LITERAL, $1); }
    | LIT_CHAR                                                               { $$ = new ASTNode(ASTNodeType::LITERAL, $1); }
    | LIT_REAL                                                               { $$ = new ASTNode(ASTNodeType::LITERAL, $1); }
    ;

arguments_list
    : expression_list                                                        { $$ = new ASTNode(ASTNodeType::ARGUMENTS_LIST); if ($1 != nullptr) $$->addChild($1); }
    | %empty                                                                 { $$ = nullptr; }
    ;

expression_list
    : expression ',' expression_list                                         { $$ = new ASTNode(ASTNodeType::EXPRESSION_LIST); $$->addChild($1); if ($3 != nullptr) $$->addChild($3); }
    | expression                                                             { $$ = $1; }
    ;

flux_control
    : KW_IF '(' expression ')' command %prec IFX                             { $$ = new ASTNode(ASTNodeType::IF, nullptr, {}, getLineNumber()); $$->addChild($3); if ($5 != nullptr) $$->addChild($5); }
    | KW_IF '(' expression ')' command KW_ELSE command                       { $$ = new ASTNode(ASTNodeType::IF, nullptr, {}, getLineNumber()); $$->addChild($3); if ($5 != nullptr) $$->addChild($5); ASTNode* elseNode = new ASTNode(ASTNodeType::ELSE, nullptr, {}, getLineNumber()); if ($7 != nullptr) elseNode->addChild($7); $$->addChild(elseNode); }
    | KW_WHILE expression KW_DO command                                      { $$ = new ASTNode(ASTNodeType::WHILE_DO, nullptr, {}, getLineNumber()); $$->addChild($2); if ($4 != nullptr) $$->addChild($4); }
    | KW_DO command KW_WHILE expression ';'                                  { $$ = new ASTNode(ASTNodeType::DO_WHILE, nullptr, {}, getLineNumber()); if ($2 != nullptr) $$->addChild($2); $$->addChild($4); }
    | KW_IF '(' error ')' command %prec IFX                                  { fprintf(stderr, "Syntax error at line %d: Invalid if condition - expected boolean expression inside parentheses.\n", getLineNumber()); $$ = nullptr; }
    | KW_IF '(' error ')' command KW_ELSE command                            { fprintf(stderr, "Syntax error at line %d: Invalid if-else condition - expected boolean expression inside parentheses.\n", getLineNumber()); $$ = nullptr; }
    | KW_WHILE error KW_DO command                                           { fprintf(stderr, "Syntax error at line %d: Invalid while condition - expected boolean expression between 'while' and 'do' keywords.\n", getLineNumber()); $$ = nullptr; }
    | KW_DO command KW_WHILE error ';'                                       { fprintf(stderr, "Syntax error at line %d: Invalid do-while condition - expected boolean expression after 'while' keyword.\n", getLineNumber()); $$ = nullptr; }
    ;

%%

void yyerror(string s){
    s[0] = static_cast<char>(toupper(static_cast<unsigned char>(s[0])));
    //fprintf(stderr, "%s.\n", s.c_str(), getLineNumber());

    // Does not terminate compilation immediately to allow error recovery
    // exit(3);

   ++syntaxErrors;
}

int getSyntaxErrors(){
    return syntaxErrors;
}